// 아두이노->컴퓨터로 시리얼 통신 할 때 Serial.println() 사용하면 오류 발생. Serial.print() 사용하기
#include <IRremote.h>
#include <time.h>
#include <Servo.h>
#include <TimerFreeTone.h>
#include <LiquidCrystal_I2C.h>
#include <HX711.h>

#define DEBUG_MODE

// remote
int recvPin = A1;
IRrecv irrecv(recvPin);
decode_results result;

// lcd
LiquidCrystal_I2C lcd(0x3F, 20, 4);

// alarm
struct hour_minute {
    int hour;
    int minute;
};

struct hour_minute cur_time = {-1, -1};
struct hour_minute alarm_time = {-1, -1};

bool is_alarm_setting = false;
bool is_alarm_set = false;

bool is_first_alarm_rang = false;

int hhmm_input[4], hhmm_input_idx;

// water pump
int AA = 10;
int AB = 6;

// 무게센서
HX711 scale;
int DOUT = 3;
int CLK = 2;

// servo motor
Servo servo;
int servo_pin = 9;

bool rainable = false;
bool is_closed = false;

// ultrasonic
int trig_pin = 2;
int echo_pin = 3;

// buzzer
int buzzer_pin = 11;

// test led
int led_pin = 8;

float servo_elapsed_time = 0;
void servomotor() {
    servo.write(0);    // 시계 회전

    servo.write(90);   // 정지

    servo.write(180);  // 반시계 회전

    servo.write(90);   // 정지
}

int result_to_int(long unsigned int res) {
    int num;
    
    if (res == 0xFF6897) num = 0;
    else if (res == 0xFF30CF) num = 1;
    else if (res == 0xFF18E7) num = 2;
    else if (res == 0xFF7A85) num = 3;
    else if (res == 0xFF10EF) num = 4;
    else if (res == 0xFF38C7) num = 5;
    else if (res == 0xFF5AA5) num = 6;
    else if (res == 0xFF42BD) num = 7;
    else if (res == 0xFF4AB5) num = 8;
    else if (res == 0xFF52AD) num = 9;

    return num;
}

void set_alarm() {
    if (irrecv.decode(&result)) {
        Serial.println(result.value, HEX);
        switch (result.value) {
            case 0xFFC23D:  // Play
                if (!is_alarm_setting && is_alarm_set) { // 알람 해제
                    hhmm_input[0] = hhmm_input[1] = hhmm_input[2] = hhmm_input[3] = 0;
                    hhmm_input_idx = 0;

                    is_alarm_set = false;
                    return;
                }
                if (is_alarm_setting && hhmm_input_idx == 4) { // 알람 설정 완료
                    alarm_time.hour = hhmm_input[0] * 10 + hhmm_input[1];
                    alarm_time.minute = hhmm_input[2] * 10 + hhmm_input[3];
                }

                // toggle alarm states
                is_alarm_setting = !is_alarm_setting;
                is_alarm_set = !is_alarm_set;
                break;
            case 0xFFE01F:  // -
                if (is_alarm_setting && hhmm_input_idx > 0)
                    hhmm_input[--hhmm_input_idx] = 0;
                break;
            case 0xFF6897:  // 0
            case 0xFF30CF:  // 1
            case 0xFF18E7:  // 2
            case 0xFF7A85:  // 3
            case 0xFF10EF:  // 4
            case 0xFF38C7:  // 5
            case 0xFF5AA5:  // 6
            case 0xFF42BD:  // 7
            case 0xFF4AB5:  // 8
            case 0xFF52AD:  // 9
                if (hhmm_input_idx < 4) {
                    int input_num = result_to_int(result.value);
                    hhmm_input[hhmm_input_idx++] = input_num;
                }
                break;
            default:
                break;
        }

        delay(250);
        irrecv.resume();
    }
}

void update_time() {
    static unsigned long elapsed_time;

    if (cur_time.hour == -1 && cur_time.minute == -1) {
        while (!Serial.available());
        delay(250);  // 모든 바이트가 전송되었을 때 까지 기다리기

        /* String raw = Serial.readString();
        cur_time.hour = raw.substring(0, 2).toInt();
        cur_time.minute = raw.substring(2, 4).toInt(); */
        cur_time.hour = Serial.parseInt();
        cur_time.minute = Serial.parseInt();

        #ifdef DEBUG_MODE
            if (cur_time.hour < 10) Serial.print('0');
            Serial.print(cur_time.hour);
            Serial.print(':');
            if (cur_time.minute < 10) Serial.print('0');
            Serial.println(cur_time.minute);
        #endif
    } else {
        if (millis() - elapsed_time >= 60000) {
            cur_time.minute++;
            if (cur_time.minute == 60) {
                cur_time.minute = 0;
                cur_time.hour++;
                if (cur_time.hour == 24)
                    cur_time.hour = 0;
            }
            elapsed_time = millis();
        }
    }
}

void water() {
    // Hydro-pump
    digitalWrite(AA, HIGH);
    digitalWrite(AB, LOW);

    /* // Stop
    digitalWrite(AA, LOW);
    digitalWrite(AB, LOW); */
}

void alarm_checker() {
    if (is_alarm_set && alarm_time.hour == cur_time.hour && alarm_time.minute == cur_time.minute) {
        // alarm goes off
        if (!is_first_alarm_rang) is_first_alarm_rang = true;
        else water();
        
        TimerFreeTone(buzzer_pin, 262, 1);
    }
}

bool is_near(int threshold = 10000) {
    digitalWrite(trig_pin, HIGH);
    delay(10); // 10us
    digitalWrite(trig_pin, LOW);

    int duration = pulseIn(echo_pin, HIGH);
    int distance = (float)340 * duration / 1000 / 2; // mm

#ifdef DEBUG_MODE
    Serial.print(distance);
    Serial.println("mm");
#endif

    if (distance <= threshold) return true;
    else return false;
}

void update_rainable() {
    if (cur_time.hour == 6 && cur_time.minute == 0) {
        while (Serial.available());
        delay(250);

        rainable = Serial.parseInt();
    }
}

void umbrella() {
    if (rainable && is_closed && is_near()){
        // 우산장 열기
        is_closed = false;
    }

    if (!is_closed && !is_near()) {
        // 우산장 닫기
        is_closed = true;
    }
}

void weight() {
  long weight_value = scale.get_units(10);

  Serial.println(weight_value);
  delay(1000);
}

void setup() {
    Serial.begin(9600);
    Serial.setTimeout(1);

    // irrecv = IRrecv(recvPin);
    irrecv.enableIRIn();

    pinMode(AA, OUTPUT);
    pinMode(AB, OUTPUT);

    servo.attach(servo_pin);

    pinMode(trig_pin, OUTPUT);
    pinMode(echo_pin, INPUT);

    scale.begin(DOUT, CLK);
    scale.set_scale(400.0f);
    scale.tare();

    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Hello world");

    pinMode(led_pin, OUTPUT);
}

void loop() {
    // update_time();
    // servomotor();
    // water();
    // if (is_alarm_set) alarm_checker();
}